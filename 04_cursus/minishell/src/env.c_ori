/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   env.c                                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: zkepes <zkepes@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/07/01 14:12:43 by zkepes            #+#    #+#             */
/*   Updated: 2024/07/01 19:21:49 by zkepes           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../include/minishell.h"

void	init_env(t_env **list_env, char *env[])
{
	t_env	*current;
	t_env	*node;
	char	*p_start;
	char	*p_equal;

	*list_env = NULL;
	while(*env)
	{
		p_start = *env;
		p_equal = ft_strchr(*env, '=');
		node = (t_env *) malloc(sizeof(t_env));
		node->var = ft_substr(*env, 0, p_equal - p_start);
		node->val = ft_substr(*env, p_equal - p_start + 1, ft_strlen(*env));
		node->next = NULL;
		env++;
		if (!(*list_env))
		{
			*list_env = node;
			current = node;
		}
		else
		{
			current->next = node;
			current = current->next;
		}
	}	
}

void	print_env(t_env *list_env)
{
	t_env	*current;

	current = list_env;
	while (current)
	{
		printf("var:\t|%s|\n", current->var);
		printf("val:\t|%s|\n\n", current->val);
		current = current->next;
	}
}

/*If "search" match "list_env->var", return "node", else NULL*/
t_env	*search_var(t_env *list_env, char *str)
{
	t_env	*current;
	int		len;

	current = list_env;
	len = ft_strlen(str);
	while (current)
	{
		if (!ft_strncmp(str, current->var, len) && current->var[len] == '\0')
			return current;
		current = current->next;
	}
	return NULL;
}
