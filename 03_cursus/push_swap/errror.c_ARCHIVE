/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   errror.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: zkepes <zkepes@student.42.fr>              +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/02/27 15:53:51 by zkepes            #+#    #+#             */
/*   Updated: 2024/02/27 17:37:12 by zkepes           ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "push_swap.h"

/*end programm with the "error()" if invalid input*/
void    valid_input(int argc, char **argv)
{
    if (argc == 1)
        error();
    else if (argc == 2)
        if (error_arg_1(argv[1]))
            error();
    else
        if (error_args())
            error();
}

/*write "Error\n" to the "stderr" output and exit programm*/
void error()
{
    write(2, "Error\n", 6);
    exit(1);
}

bool    error_arg_1(char *argv)
{
    int i;
    int start;
    int end;

    i = 0;
    while (digit(argv[i]) || argv[i] == '-' || argv[i] == ' ')
    {
        if (argv[i] == ' ')
        {
            i++;
            continue;
        }
        start = i;
        i++;
        while (digit(argv[i]))
            i++;
        end = i;

    



    }
}

bool digit(char c)
{
    return (c >= '0' && c <= '9');
}

/*check if the signe can be a valid minus sign,
-> if not at the end, after no digit == no valid miuns
-> if not at the beginning, before no empty space == no valid minus*/
bool neg(char *str, int i)
{
    if (*str != '\0')
        if (!digit(str[1]))
            return (false);
    else if (i > 0)
        if (str[-1] != ' ')
            return (false);
    return (true);
}

bool found_double(char *str, int before, )
{

}